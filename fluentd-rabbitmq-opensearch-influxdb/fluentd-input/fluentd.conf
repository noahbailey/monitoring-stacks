## System-wide settings
<system>
  log_level warn
</system>

## Forwarder input
<source>
  @type forward
  bind 0.0.0.0
  port 5000
</source>

## GeoIP filter for 
<filter events.*>
  @type geoip
  geoip_lookup_keys  src_ip
  backend_library geoip2_c
  <record>
    city            ${city.names.en["src_ip"]}
    latitude        ${location.latitude["src_ip"]}
    longitude       ${location.longitude["src_ip"]}
    country         ${country.iso_code["src_ip"]}
    country_name    ${country.names.en["src_ip"]}
    postal_code     ${postal.code["src_ip"]}
    region_code     ${subdivisions.0.iso_code["src_ip"]}
    region_name     ${subdivisions.0.names.en["src_ip"]}
  </record>
  skip_adding_null_record  true
</filter>

## Output to RabbitMQ with queue per data type
<match metrics.**>
  @type rabbitmq
  host "#{ENV['RABBITMQ_HOST']}"
  user guest
  pass guest
  vhost /
  format json 
  exchange metrics 
  exchange_type topic
  exchange_durable false
  routing_key metrics
  timestamp true
  heartbeat 10 
  <format>
    @type json 
  </format>
  <buffer> 
    flush_interval 10s
  </buffer>
</match>

<match events.**>
  @type rabbitmq
  host "#{ENV['RABBITMQ_HOST']}"
  user guest
  pass guest
  vhost /
  format json 
  exchange events 
  exchange_type topic
  exchange_durable false
  routing_key events
  timestamp true
  heartbeat 10 
  <format>
    @type json 
  </format>
  <buffer> 
    
  </buffer>
</match>

<match **>
  @type rabbitmq
  host "#{ENV['RABBITMQ_HOST']}"
  user guest
  pass guest
  vhost /
  format json 
  exchange syslog 
  exchange_type topic
  exchange_durable false
  routing_key syslog
  timestamp true
  heartbeat 10 
  <format>
    @type json 
  </format>
  <buffer> 
  </buffer>
</match>